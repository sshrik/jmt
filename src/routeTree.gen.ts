/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as ProjectsRouteImport } from './routes/projects'
import { Route as ManualRouteImport } from './routes/manual'
import { Route as FlowchartRouteImport } from './routes/flowchart'
import { Route as BacktestRouteImport } from './routes/backtest'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectsProjectIdIndexRouteImport } from './routes/projects/$projectId/index'
import { Route as ProjectsProjectIdEditRouteImport } from './routes/projects/$projectId/edit'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsRoute = ProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => rootRouteImport,
} as any)
const ManualRoute = ManualRouteImport.update({
  id: '/manual',
  path: '/manual',
  getParentRoute: () => rootRouteImport,
} as any)
const FlowchartRoute = FlowchartRouteImport.update({
  id: '/flowchart',
  path: '/flowchart',
  getParentRoute: () => rootRouteImport,
} as any)
const BacktestRoute = BacktestRouteImport.update({
  id: '/backtest',
  path: '/backtest',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectsProjectIdIndexRoute = ProjectsProjectIdIndexRouteImport.update({
  id: '/$projectId/',
  path: '/$projectId/',
  getParentRoute: () => ProjectsRoute,
} as any)
const ProjectsProjectIdEditRoute = ProjectsProjectIdEditRouteImport.update({
  id: '/$projectId/edit',
  path: '/$projectId/edit',
  getParentRoute: () => ProjectsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/backtest': typeof BacktestRoute
  '/flowchart': typeof FlowchartRoute
  '/manual': typeof ManualRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/projects/$projectId/edit': typeof ProjectsProjectIdEditRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/backtest': typeof BacktestRoute
  '/flowchart': typeof FlowchartRoute
  '/manual': typeof ManualRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/projects/$projectId/edit': typeof ProjectsProjectIdEditRoute
  '/projects/$projectId': typeof ProjectsProjectIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/backtest': typeof BacktestRoute
  '/flowchart': typeof FlowchartRoute
  '/manual': typeof ManualRoute
  '/projects': typeof ProjectsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/projects/$projectId/edit': typeof ProjectsProjectIdEditRoute
  '/projects/$projectId/': typeof ProjectsProjectIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/backtest'
    | '/flowchart'
    | '/manual'
    | '/projects'
    | '/settings'
    | '/projects/$projectId/edit'
    | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/backtest'
    | '/flowchart'
    | '/manual'
    | '/projects'
    | '/settings'
    | '/projects/$projectId/edit'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/backtest'
    | '/flowchart'
    | '/manual'
    | '/projects'
    | '/settings'
    | '/projects/$projectId/edit'
    | '/projects/$projectId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BacktestRoute: typeof BacktestRoute
  FlowchartRoute: typeof FlowchartRoute
  ManualRoute: typeof ManualRoute
  ProjectsRoute: typeof ProjectsRouteWithChildren
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects': {
      id: '/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manual': {
      id: '/manual'
      path: '/manual'
      fullPath: '/manual'
      preLoaderRoute: typeof ManualRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flowchart': {
      id: '/flowchart'
      path: '/flowchart'
      fullPath: '/flowchart'
      preLoaderRoute: typeof FlowchartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/backtest': {
      id: '/backtest'
      path: '/backtest'
      fullPath: '/backtest'
      preLoaderRoute: typeof BacktestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/projects/$projectId/': {
      id: '/projects/$projectId/'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProjectsProjectIdIndexRouteImport
      parentRoute: typeof ProjectsRoute
    }
    '/projects/$projectId/edit': {
      id: '/projects/$projectId/edit'
      path: '/$projectId/edit'
      fullPath: '/projects/$projectId/edit'
      preLoaderRoute: typeof ProjectsProjectIdEditRouteImport
      parentRoute: typeof ProjectsRoute
    }
  }
}

interface ProjectsRouteChildren {
  ProjectsProjectIdEditRoute: typeof ProjectsProjectIdEditRoute
  ProjectsProjectIdIndexRoute: typeof ProjectsProjectIdIndexRoute
}

const ProjectsRouteChildren: ProjectsRouteChildren = {
  ProjectsProjectIdEditRoute: ProjectsProjectIdEditRoute,
  ProjectsProjectIdIndexRoute: ProjectsProjectIdIndexRoute,
}

const ProjectsRouteWithChildren = ProjectsRoute._addFileChildren(
  ProjectsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BacktestRoute: BacktestRoute,
  FlowchartRoute: FlowchartRoute,
  ManualRoute: ManualRoute,
  ProjectsRoute: ProjectsRouteWithChildren,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
